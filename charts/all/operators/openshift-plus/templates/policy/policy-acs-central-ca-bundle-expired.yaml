apiVersion: policy.open-cluster-management.io/v1
kind: Policy
metadata:
  annotations:
    policy.open-cluster-management.io/categories: SC System and Communications Protection
    policy.open-cluster-management.io/controls: SC-8 Transmission Confidentiality
      and Integrity
    policy.open-cluster-management.io/description: Policy will remove expired certificates
      created by the init-bundle in policy policy-acs-central-ca-bundle so we can
      create a new init-bundle
    policy.open-cluster-management.io/standards: NIST SP 800-53
  labels:
    open-cluster-management.io/policy-set: openshift-plus
  name: policy-acs-central-ca-bundle-expired
  namespace: policies
spec:
  dependencies:
  - apiVersion: policy.open-cluster-management.io/v1
    compliance: NonCompliant
    kind: Policy
    name: policy-acs-monitor-certs
    namespace: policies
  disabled: false
  policy-templates:
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: sensor-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired2
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: collector-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired3
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: v1
            kind: Secret
            metadata:
              name: admission-control-tls
              namespace: stackrox
        remediationAction: enforce
        severity: medium
  - ignorePending: true
    objectDefinition:
      apiVersion: policy.open-cluster-management.io/v1
      kind: ConfigurationPolicy
      metadata:
        name: policy-acs-central-ca-bundle-expired4
      spec:
        evaluationInterval:
          compliant: 1m
          noncompliant: 45s
        object-templates:
        - complianceType: mustnothave
          objectDefinition:
            apiVersion: batch/v1
            kind: Job
            metadata:
              annotations:
                argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                argocd.argoproj.io/sync-wave: "2"
              labels:
                init-bundle: central
              name: create-cluster-init-bundle-v2
              namespace: stackrox
            spec:
              template:
                metadata:
                  annotations:
                    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
                  labels:
                    init-bundle: central
                spec:
                  containers:
                  - command:
                    - /bin/bash
                    - -c
                    - "#!/usr/bin/env bash\nif kubectl get secret/sensor-tls &> /dev/null;
                      then\n  echo \"cluster-init bundle has already been configured,
                      doing nothing\"\n  exit 0\nelse\n\n  # Wait for central to be
                      ready\n  attempt_counter=0\n  max_attempts=20\n  echo \"Waiting
                      for central to be available...\"\n  until $(curl -k --output
                      /dev/null --silent --head --fail https://central); do\n      if
                      [ ${attempt_counter} -eq ${max_attempts} ];then\n        echo
                      \"Max attempts reached\"\n        exit 1\n      fi\n\n      printf
                      '.'\n      attempt_counter=$(($attempt_counter+1))\n      echo
                      \"Made attempt $attempt_counter, waiting...\"\n      sleep 5\n
                      \ done\n\n  # attempt to create init-bundle\n  # on failure
                      attempt to delete the bundle\n  attempt_counter=0\n  max_attempts=5\n
                      \ echo \"Configuring cluster-init bundle\"\n  \n  # set the
                      bundle name to include todays date\n  bundle_name=local-cluster-$(date
                      '+%Y%m%d')\n  export DATA={\\\"name\\\":\\\"$bundle_name\\\"}\n
                      \ until (curl -k -o /tmp/bundle.json -X POST -u \"admin:$PASSWORD\"
                      -H \"Content-Type: application/json\" --data $DATA --fail https://central/v1/cluster-init/init-bundles);
                      do\n      if [ ${attempt_counter} -eq ${max_attempts} ];then\n
                      \       echo \"Max attempts to create bundle reached\"\n        exit
                      1\n      fi\n\n      echo \"Check to see if there is an existing
                      bundle that can be revoked\"\n      curl -o /tmp/find_bundle.json
                      \ -k -X GET -u \"admin:$PASSWORD\" -H \"Content-Type: application/json\"
                      https://central/v1/cluster-init/init-bundles\n      bundle_id=$(cat
                      /tmp/find_bundle.json | python -c \"import sys, json; result
                      = [x for x in json.load(sys.stdin)[\\\"items\\\"] if x[\\\"name\\\"]==\\\"$bundle_name\\\"];
                      print(result[0][\\\"id\\\"])\")\n\n      echo \"-------------------------\"\n
                      \     echo \"bundle name is $bundle_name bundle id $bundle_id\"\n
                      \     echo \"-------------------------\"\n\n      if [ \"${bundle_id}\"
                      != \"\" ];then\n      echo \"executing revoke command\"\n        export
                      REVOKE=\"{\\\"ids\\\":[\\\"$bundle_id\\\"],\\\"confirmImpactedClustersIds\\\":[]}\"\n
                      \       curl -k -X PATCH -u \"admin:$PASSWORD\" -H \"Content-Type:
                      application/json\" --data $REVOKE https://central/v1/cluster-init/init-bundles/revoke\n
                      \     fi\n\n      printf '.'\n      attempt_counter=$(($attempt_counter+1))\n
                      \     echo \"Made create bundle attempt $attempt_counter, waiting...\"\n
                      \     sleep 5\n  done\n\n  echo \"Bundle received\"\n\n  if
                      [[ \"$OSTYPE\" == \"linux-gnu\"* ]]; then\n      BASE='base64
                      -w 0'\n  elif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      BASE='base64'\n
                      \ fi\n\n  echo \"Applying bundle\"\n  # No jq in container,
                      python to the rescue\n  cat /tmp/bundle.json | python3 -c \"import
                      sys, json; print(json.load(sys.stdin)['kubectlBundle'])\" |
                      ${BASE} -d | oc apply -f -\n  ACS_HOST=\"$(oc get route central
                      -o custom-columns=HOST:.spec.host --no-headers):443\"\n  oc
                      patch secret sensor-tls --type='json' -p=\"[{\\\"op\\\" : \\\"add\\\",
                      \\\"path\\\" : \\\"/data/acs-host\\\", \\\"value\\\" : \\\"$(echo
                      $ACS_HOST | ${BASE})\\\"}]\"\n  echo \"ACS Cluster init bundle
                      generated and applied\"\nfi\n"
                    env:
                    - name: PASSWORD
                      valueFrom:
                        secretKeyRef:
                          key: password
                          name: central-htpasswd
                    image: image-registry.openshift-image-registry.svc:5000/openshift/cli:latest
                    imagePullPolicy: Always
                    name: create-cluster-init-bundle
                  dnsPolicy: ClusterFirst
                  restartPolicy: Never
                  serviceAccount: create-cluster-init
                  serviceAccountName: create-cluster-init
                  terminationGracePeriodSeconds: 30
        remediationAction: enforce
        severity: medium
  remediationAction: enforce
